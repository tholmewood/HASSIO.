import logging
import voluptuous as vol

from homeassistant.components.sensor import SensorEntity
from homeassistant.const import (
    ATTR_TEMPERATURE,
    ATTR_HUMIDITY,
    ATTR_BATTERY_LEVEL,
    ATTR_POWER_CONSUMPTION,
)

_LOGGER = logging.getLogger(__name__)


class PrinterSensor(SensorEntity):
    """Representation of a printer sensor."""

    def __init__(self, name, host, port, api_key):
        """Initialize the printer sensor."""
        self._name = name
        self._host = host
        self._port = port
        self._api_key = api_key

        self._temperature = None
        self._humidity = None
        self._battery_level = None
        self._power_consumption = None

    @property
    def name(self):
        """Return the name of the sensor."""
        return self._name

    @property
    def state(self):
        """Return the current state of the sensor."""
        if self._temperature is None:
            return None
        return self._temperature

    @property
    def unit_of_measurement(self):
        """Return the unit of measurement of the sensor."""
        return 'Â°C'

    @property
    def icon(self):
        """Return the icon of the sensor."""
        return 'mdi:printer'

    def update(self):
        """Update the state of the sensor."""
        try:
            response = requests.get(
                f'http://{self._host}:{self._port}/api/printer',
                headers={'Authorization': f'Bearer {self._api_key}'},
            )
            if response.status_code == 200:
                printer_data = response.json()
                self._temperature = printer_data['temperature']
                self._humidity = printer_data['humidity']
                self._battery_level = printer_data['battery_level']
                self._power_consumption = printer_data['power_consumption']
        except requests.exceptions.RequestException as ex:
            _LOGGER.error('Error updating printer sensor: %s', ex)

    def to_dict(self):
        """Return the state of the sensor as a dictionary."""
        return {
            'name': self.name,
            'state': self.state,
            'unit_of_measurement': self.unit_of_measurement,
            'icon': self.icon,
            'temperature': self._temperature,
            'humidity': self._humidity,
            'battery_level': self._battery_level,
            'power_consumption': self._power_consumption,
        }


class PrinterSensorConfig(vol.Schema):
    """Configuration for a printer sensor."""

    name = vol.Required(vol.String)
    host = vol.Required(vol.String)
    port = vol.Required(vol.Int)
    api_key = vol.Required(vol.String)


@asyncio.coroutine
def async_setup_platform(hass, config, async_add_entities, discovery_info=None):
    """Set up the printer sensor platform."""

    sensors = []
    for name, host, port, api_key in config['sensors']:
        sensors.append(PrinterSensor(name, host, port, api_key))

    async_add_entities(sensors)

